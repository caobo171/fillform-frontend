'use client'
import { FC, useState, useEffect } from 'react'
import Image from 'next/image'
import { Toast } from '@/services/Toast'
import { useMe, useMyBankInfo } from '@/hooks/user';
import { Container } from '@/components/layout/container/container'
import { OPTIONS_DELAY, OPTIONS_DELAY_ENUM } from '@/core/Constants'

const CreditPage: FC<{}> = () => {

    const me = useMe();
    const bankInfo = useMyBankInfo();

    // State for calculator
    const [numRequest, setNumRequest] = useState<number>(0);
    const [delayType, setDelayType] = useState<number>(OPTIONS_DELAY_ENUM.NO_DELAY);
    const [pricePerUnit, setPricePerUnit] = useState<number>(OPTIONS_DELAY[OPTIONS_DELAY_ENUM.NO_DELAY].price);
    const [totalCost, setTotalCost] = useState<number>(0);
    const [delayInfo, setDelayInfo] = useState<string>(`Kh√¥ng c√≥ ƒëi·ªÅn r·∫£i d√£n c√°ch. ƒê∆°n gi√° ${OPTIONS_DELAY[OPTIONS_DELAY_ENUM.NO_DELAY].price} VND / 1 m·∫´u tr·∫£ l·ªùi. K·∫øt qu·∫£ l√™n ngay t·ª©c th√¨.`);

    // Update calculation when inputs change
    useEffect(() => {
        let currentPricePerUnit = OPTIONS_DELAY[OPTIONS_DELAY_ENUM.NO_DELAY].price;
        let currentDelayInfo = "";
        
        switch (delayType) {
            case OPTIONS_DELAY_ENUM.SHORT_DELAY:
                currentPricePerUnit = OPTIONS_DELAY[OPTIONS_DELAY_ENUM.SHORT_DELAY].price;
                currentDelayInfo = `Bill ƒëi·ªÅn r·∫£i ng·∫Øn c√≥ ƒë∆°n gi√° ${currentPricePerUnit} VND / 1 m·∫´u tr·∫£ l·ªùi. R·∫£i random t·ª´ 1 ƒë·∫øn 5 ph√∫t. Th·ªùi gian ho√†n th√†nh 100 m·∫´u ti√™u chu·∫©n l√† kho·∫£ng 2 gi·ªù.`;
                break;
            case OPTIONS_DELAY_ENUM.STANDARD_DELAY:
                currentPricePerUnit = OPTIONS_DELAY[OPTIONS_DELAY_ENUM.STANDARD_DELAY].price;
                currentDelayInfo = `Bill ƒëi·ªÅn r·∫£i ti√™u chu·∫©n c√≥ ƒë∆°n gi√° ${currentPricePerUnit} VND / 1 m·∫´u tr·∫£ l·ªùi. R·∫£i random t·ª´ 1 ƒë·∫øn 10 ph√∫t. Th·ªùi gian ho√†n th√†nh 100 m·∫´u ti√™u chu·∫©n l√† kho·∫£ng 12 gi·ªù.`;
                break;
            case OPTIONS_DELAY_ENUM.LONG_DELAY:
                currentPricePerUnit = OPTIONS_DELAY[OPTIONS_DELAY_ENUM.LONG_DELAY].price;
                currentDelayInfo = `Bill ƒëi·ªÅn r·∫£i d√†i c√≥ ƒë∆°n gi√° ${currentPricePerUnit} VND / 1 m·∫´u tr·∫£ l·ªùi. R·∫£i random t·ª´ 1 ƒë·∫øn 20 ph√∫t. Th·ªùi gian ho√†n th√†nh 100 m·∫´u ti√™u chu·∫©n l√† kho·∫£ng 24 gi·ªù.`;
                break;
            default:
                currentPricePerUnit = OPTIONS_DELAY[OPTIONS_DELAY_ENUM.NO_DELAY].price;
                currentDelayInfo = `Kh√¥ng c√≥ ƒëi·ªÅn r·∫£i d√£n c√°ch. ƒê∆°n gi√° ${currentPricePerUnit} VND / 1 m·∫´u tr·∫£ l·ªùi. K·∫øt qu·∫£ l√™n ngay t·ª©c th√¨.`;
        }

        setPricePerUnit(currentPricePerUnit);
        setTotalCost(numRequest * currentPricePerUnit);
        setDelayInfo(currentDelayInfo);
    }, [numRequest, delayType]);

    const copyText = (text: string) => {
        navigator.clipboard.writeText(text)
        Toast.success(`ƒê√£ sao ch√©p: ${text}`)
    }

    return (
        <Container>
            <div className="relative isolate overflow-hidden py-12">
                <div className="container mx-auto">
                    {/* Header */}
                    <div className="mb-8 text-center">
                        <h2 className="text-3xl font-bold mb-3">N·∫°p ti·ªÅn v√†o t√†i kho·∫£n</h2>
                        <div className="text-2xl items-center gap-2 mb-2">
                            S·ªë d∆∞ hi·ªán t·∫°i: <span className="font-bold">{me?.data?.credit.toLocaleString()} VND</span>
                        </div>
                        <p className="text-gray-600">
                            Username: <span className="font-bold">{me?.data?.username}</span>
                        </p>
                    </div>

                    {/* Payment Information */}
                    <div className="bg-white shadow-sm rounded-lg mb-10">
                        <div className="p-6">
                            <div className="mb-6">
                                <p className="text-gray-700 mb-4">
                                    B·∫°n vui l√≤ng chuy·ªÉn kho·∫£n <span className="font-bold">ch√≠nh x√°c n·ªôi dung chuy·ªÉn ti·ªÅn</span> b√™n d∆∞·ªõi h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông c·ªông ti·ªÅn cho b·∫°n sau 1 - 3 ph√∫t sau khi nh·∫≠n ƒë∆∞·ª£c ti·ªÅn.<br />
                                    Sau khi th·∫•y t√†i kho·∫£n chuy·ªÉn ti·ªÅn th√†nh c√¥ng, th·ª≠ <span className="font-bold">ƒêƒÉng xu·∫•t v√† ƒêƒÉng nh·∫≠p l·∫°i</span> ƒë·ªÉ ki·ªÉm tra s·ªë d∆∞ FillForm nh√©! <br />
                                    N·∫øu sau 10 ph√∫t t·ª´ khi ti·ªÅn trong t√†i kho·∫£n c·ªßa b·∫°n b·ªã tr·ª´ m√† v·∫´n ch∆∞a ƒë∆∞·ª£c c·ªông ti·ªÅn vui l√≤ng li√™n h·ªá h·ªó tr·ª£.
                                </p>
                            </div>

                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div className="space-y-3 bg-gray-50 p-4 rounded-lg">
                                    <div className="flex items-center">
                                        <span className="w-1/3 font-medium text-gray-700">T√™n Ng√¢n H√†ng</span>
                                        <div className="flex items-center gap-2">
                                            <button onClick={() => copyText(bankInfo.data?.name || "")} className="hover:opacity-70 bg-gray-100 p-1 rounded">üìã</button>
                                            <span>{bankInfo.data?.name}</span>
                                        </div>
                                    </div>

                                    <div className="flex items-center">
                                        <span className="w-1/3 font-medium text-gray-700">S·ªë T√†i Kho·∫£n</span>
                                        <div className="flex items-center gap-2">
                                            <button onClick={() => copyText(bankInfo.data?.number || "")} className="hover:opacity-70 bg-gray-100 p-1 rounded">üìã</button>
                                            <span>{bankInfo.data?.number}</span>
                                        </div>
                                    </div>

                                    <div className="flex items-center">
                                        <span className="w-1/3 font-medium text-gray-700">T√™n T√†i Kho·∫£n</span>
                                        <div className="flex items-center gap-2">
                                            <button onClick={() => copyText("VUONG TIEN DAT")} className="hover:opacity-70 bg-gray-100 p-1 rounded">üìã</button>
                                            <span>VUONG TIEN DAT</span>
                                        </div>
                                    </div>

                                    <div className="flex items-center">
                                        <span className="w-1/3 font-medium text-gray-700">N·ªôi dung chuy·ªÉn ti·ªÅn</span>
                                        <div className="flex items-center gap-2">
                                            <button onClick={() => copyText(bankInfo.data?.message_credit || "")} className="hover:opacity-70 bg-gray-100 p-1 rounded">üìã</button>
                                            <span>{bankInfo.data?.message_credit}</span>
                                        </div>
                                    </div>

                                    <div className="flex items-start mt-4">
                                        <span className="w-1/3 font-medium text-gray-700">M√£ QR</span>
                                        <div className="flex items-center gap-2">
                                            <Image
                                                src={bankInfo.data?.qr_link || ""}
                                                alt="QRCode"
                                                width={200}
                                                height={200}
                                                className="w-[200px] h-auto"
                                            />
                                        </div>

                                    </div>
                                </div>

                                <div className="flex justify-center items-center bg-gray-50 p-4 rounded-lg">
                                    <div className="w-full">
                                        <h3 className="text-xl font-bold mb-4">M√°y t√≠nh chi ph√≠</h3>
                                        <p className="text-gray-600 mb-4">∆Ø·ªõc t√≠nh chi ph√≠ c·∫ßn thanh to√°n cho d·ªãch v·ª• ƒëi·ªÅn form t·ª± ƒë·ªông</p>
                                        <div className="space-y-4">
                                            <div>
                                                <label htmlFor="numRequest" className="block text-sm font-medium text-gray-700 mb-1">
                                                    S·ªë l∆∞·ª£ng m·∫´u c·∫ßn ƒëi·ªÅn
                                                </label>
                                                <input
                                                    type="number"
                                                    id="numRequest"
                                                    min="1"
                                                    value={numRequest || ''}
                                                    className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                                    placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng m·∫´u"
                                                    onChange={(e) => {
                                                        const value = e.target.value;
                                                        setNumRequest(value ? parseInt(value) : 0);
                                                    }}
                                                />
                                            </div>

                                            <div>
                                                <label htmlFor="delayType" className="block text-sm font-medium text-gray-700 mb-1">
                                                    Lo·∫°i ƒëi·ªÅn r·∫£i
                                                </label>
                                                <select
                                                    id="delayType"
                                                    value={delayType}
                                                    className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                                    onChange={(e) => {
                                                        setDelayType(parseInt(e.target.value));
                                                    }}
                                                >
                                                    {
                                                        Object.values(OPTIONS_DELAY_ENUM).map((delay) => (
                                                            <option value={delay}>{OPTIONS_DELAY[delay].name} - {OPTIONS_DELAY[delay].price}ƒë/m·∫´u</option>
                                                        ))
                                                    }
                                                </select>
                                            </div>

                                            <div className="bg-white p-3 rounded-md border border-gray-200">
                                                <div className="flex justify-between mb-2">
                                                    <span className="font-medium">ƒê∆°n gi√°:</span>
                                                    <span id="pricePerUnit">{pricePerUnit.toLocaleString()} VND</span>
                                                </div>
                                                <div className="flex justify-between mb-2">
                                                    <span className="font-medium">S·ªë l∆∞·ª£ng m·∫´u:</span>
                                                    <span id="requestCount">{numRequest.toString()}</span>
                                                </div>
                                                <div className="flex justify-between pt-2 border-t border-gray-200">
                                                    <span className="font-bold">T·ªïng chi ph√≠:</span>
                                                    <span className="font-bold text-blue-600" id="totalCost">{totalCost.toLocaleString()} VND</span>
                                                </div>
                                                <div className="flex justify-between pt-2 border-t border-gray-200 mt-2">
                                                    <span className="font-medium">S·ªë d∆∞ hi·ªán t·∫°i:</span>
                                                    <span className="font-medium">{me?.data?.credit?.toLocaleString() || 0} VND</span>
                                                </div>
                                                {totalCost > 0 && (
                                                    <div className={`p-2 mt-2 rounded-md text-center ${totalCost > (me?.data?.credit || 0) ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
                                                        {totalCost > (me?.data?.credit || 0)
                                                            ? `C·∫ßn n·∫°p th√™m ${(totalCost - (me?.data?.credit || 0)).toLocaleString()} VND`
                                                            : 'S·ªë d∆∞ ƒë·ªß ƒë·ªÉ thanh to√°n'}
                                                    </div>
                                                )}
                                            </div>

                                            <div id="delayInfo" className="text-sm text-gray-600 mt-2" dangerouslySetInnerHTML={{ __html: delayInfo }}></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Important Notes */}
                    <div className="border border-gray-100 rounded-lg overflow-hidden mb-10">
                        <h3 className="text-xl font-bold p-4 bg-gray-50 border-b border-gray-100">ƒê·∫∂C BI·ªÜT CH√ö √ù</h3>

                        <div className="p-6">
                            <ul className="list-disc pl-5 space-y-2 text-gray-700">
                                <li>FILLFORM s·∫Ω ho√†n ti·ªÅn 100% n·∫øu Tool l·ªói / s·ª≠ d·ª•ng d·ªãch v·ª• kh√¥ng th√†nh c√¥ng.</li>
                                <li>N·∫°p t·ªëi thi·ªÉu: 10,000 ƒë. C·ªë t√¨nh n·∫°p d∆∞·ªõi m·ª©c t·ªëi thi·ªÉu sai c√∫ ph√°p kh√¥ng h·ªó tr·ª£ d∆∞·ªõi m·ªçi h√¨nh th·ª©c.</li>
                                <li>N·∫°p ti·ªÅn sai c√∫ ph√°p vui l√≤ng li√™n h·ªá h·ªó tr·ª£ ƒë√≠nh k√®m h√≥a ƒë∆°n chuy·ªÉn ti·ªÅn v√† t√™n ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</li>
                                <li>Ch·ªâ h·ªó tr·ª£ c√°c giao d·ªãch n·∫°p ti·ªÅn sai c√∫ ph√°p trong v√≤ng 30 ng√†y k·ªÉ t·ª´ ng√†y chuy·ªÉn ti·ªÅn, qu√° 30 ng√†y KH√îNG x·ª≠ l√Ω d∆∞·ªõi m·ªçi h√¨nh th·ª©c!</li>
                                <li>N√™n chuy·ªÉn ti·ªÅn nhanh 24/7 ƒë·ªÉ ƒë∆∞·ª£c c·ªông ti·ªÅn ngay sau v√†i ph√∫t. Tr∆∞·ªùng h·ª£p chuy·ªÉn ti·ªÅn ch·∫≠m s·∫Ω ƒë∆∞·ª£c c·ªông ti·ªÅn sau khi ng√¢n h√†ng x·ª≠ l√Ω giao d·ªãch.</li>
                                <li>D·ªØ li·ªáu l·ªãch s·ª≠ n·∫°p ti·ªÅn c√≥ th·ªÉ s·∫Ω t·ª± ƒë·ªông x√≥a sau 30 ng√†y k·ªÉ t·ª´ ng√†y n·∫°p ti·ªÅn!</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </Container>
    )
}

export default CreditPage